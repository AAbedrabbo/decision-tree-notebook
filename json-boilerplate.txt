#    CONVERT RULES TO JSON FORMAT

def rules(clf, features, labels, node_index=0):
    
    node = {}
    if clf.tree_.children_left[node_index] == -1:  # indicates leaf
        count_labels = zip(clf.tree_.value[node_index, 0], labels)
        node['name'] = ', '.join(('{} of {}'.format(int(count), label)
                                  for count, label in count_labels))
    else:
        feature = features[clf.tree_.feature[node_index]]
        threshold = clf.tree_.threshold[node_index]
        node['name'] = '{} > {}'.format(feature, threshold)
        left_index = clf.tree_.children_left[node_index]
        right_index = clf.tree_.children_right[node_index]
        node['children'] = [rules(clf, features, labels, right_index),
                            rules(clf, features, labels, left_index)]
    return node

#    GET DATA COLUMN TITLES

hrnames = np.genfromtxt('HR_data.csv', delimiter=",", skip_header = 0, dtype = str)[0]
hrnames = hrnames.tolist()
hrnames_feature = hrnames[0:-1]
hrnames_target = hrnames[-1]

#    SAVE FORMATTED RULES AS JSON FILE

import json

r = rules(clf, hrnames_feature, hrnames_target)
with open('rules.json', 'w') as f:
    f.write(json.dumps(r))